from doctest import Example
from uuid import uuid4
from pydantic import Field
from decimal import Decimal
from pydantic import BaseModel
from pydantic.types import UUID4
from typing import List, Optional

from db.student_quiz_reports_db import StudentQuizReportsDB

class QuizStats(BaseModel):
    max_score: float = Field(..., example='Max Score')
    average: float = Field(..., example='Average Score')
    number_of_students: int = Field(..., example="Number of students who took this quiz")
    highest_marks: float = Field(..., example="Max Score obtained in this quiz")

class ScoreDetails(BaseModel):
    score: float = Field(..., example="Score obtained by student in this quiz")
    rank: int = Field(..., example="Rank obtained by student in this quiz")
    percentile: float = Field(..., example="Percentile rank of this student in this quiz")

class StudentQuizReportModel(BaseModel):
    id: Optional[str] = Field(..., example='Identifier (Autogenerated as studentid_quizid)')
    quiz_id: str = Field(..., example='Quiz Identifier')
    quiz_name: str = Field(..., example='Quiz Name')
    student_id: str = Field(..., example='Studnet ID')
    student_name: str = Field(..., example='Student Name')
    quiz_stats: QuizStats = Field(example='Quiz Stats in JSON format')
    score_details: ScoreDetails = Field(example='Score Details')


class StudentQuizReportController():
    def __init__(self, repository: StudentQuizReportsDB) -> None:
        self.__repository = repository

    def get_all(self):
        return self.__repository.get_all()

    def get_student_quiz_report(self, uid: str):
        return self.__repository.get_student_quiz_report(uid)

    def create_student_quiz_report(self, student_quiz_report: StudentQuizReportModel, id=None):
        if (id == None):
            id = str(uuid4())
        student_quiz_report.uid = id
        return self.__repository.create_student_quiz_report(student_quiz_report.dict())

    def update_student_quiz_report(self, student_quiz_report: StudentQuizReportModel):
        return self.__repository.update_student_quiz_report(student_quiz_report.dict())

    def delete_student_quiz_report(self, uid: str):
        return self.__repository.delete_student_quiz_report(uid)